name: API Test CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    name: Build Project
    runs-on: ubuntu-latest
    env:
      MAVEN_OPTS: "-Dmaven.repo.local=${{ github.workspace }}/repository"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:4317"
      SERVICE_NAME: "api-test-automation"
      TEST_RUN_ID: ${{ github.run_id }}

    services:
      zipkin:
        image: openzipkin/zipkin:2.23
        ports:
          - 9411:9411
      otel-collector:
        image: otel/opentelemetry-collector-contrib:latest
        ports:
          - 4317:4317  # OTLP gRPC
          - 55681:55681 # OTLP HTTP
        volumes:
          - ./otel-collector-config.yml:/etc/otelcol/config.yaml
      prometheus:
        image: prom/prometheus:latest
        ports:
          - 9090:9090
        options: >-
          --health-cmd="wget --spider --quiet http://localhost:9090/-/healthy || exit 1" \
          --health-interval=10s --health-timeout=5s --health-retries=5
        volumes:
          - ${{ github.workspace }}/prometheus.yml:/etc/prometheus/prometheus.yml
      grafana:
        image: grafana/grafana:latest
        ports:
          - 3000:3000
        options: >-
          --health-cmd="curl --fail http://localhost:3000/api/health || exit 1" \
          --health-interval=10s --health-timeout=5s --health-retries=5
        volumes:
          - ${{ github.workspace }}/grafana-dashboard-api-test-observability.json:/etc/grafana/provisioning/dashboards/api-test-observability.json
          - ${{ github.workspace }}/grafana-dashboard-provisioning.yaml:/etc/grafana/provisioning/dashboards/dashboard.yaml

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      - name: Run tests with instrumentation
        run: mvn clean test
        env:
          OTEL_EXPORTER_OTLP_ENDPOINT: "http://localhost:4317"
          SERVICE_NAME: "api-test-automation"
          TEST_RUN_ID: ${{ github.run_id }}

      - name: Wait for Prometheus to be healthy
        run: |
          for i in {1..10}; do
            if curl -sf http://localhost:9090/-/healthy; then exit 0; fi
            sleep 5
          done
          exit 1

      - name: Check Prometheus metrics endpoint
        run: |
          curl -sf http://localhost:9090/metrics | grep process_cpu_seconds_total

      - name: Wait for Grafana to be healthy
        run: |
          for i in {1..10}; do
            if curl -sf http://localhost:3000/api/health; then exit 0; fi
            sleep 5
          done
          exit 1

      - name: Check Grafana dashboard provisioning
        run: |
          curl -sf -u admin:admin http://localhost:3000/api/search?query=api-test-observability

      - name: Check prometheus.yml presence in service container
        run: |
          docker ps -a
          PROM_CONTAINER=$(docker ps -qf ancestor=prom/prometheus:latest)
          if [ -n "$PROM_CONTAINER" ]; then
            docker exec $PROM_CONTAINER ls -l /etc/prometheus/
          else
            echo "Prometheus container not found."
          fi
        continue-on-error: true

      - name: Confirm Zipkin is running
        run: |
          curl --fail http://localhost:9411/health || exit 1
          echo "Zipkin is up!"

      - name: Verify traces in Zipkin
        run: |
          curl -s http://localhost:9411/api/v2/traces?serviceName=api-test-automation | jq .